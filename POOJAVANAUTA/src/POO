METODOS:

Sintaxe de definição de metodos:
[modidficador de acesso] [tipo de retorno] [nome do metodo] ([parametros])

como nomear metodos:
 usar nomes de forma clare e descritiva.
 usar verbos que descrevem a ação do método
 Usar formato camelCse(Primeira palavra minucula e as demais com a primeira letra maiusculas )

Modificadores de acesso:
public: Acessivel de qualquer lugar
ptivate: Acessivel apenas dentro da clasee onde foi criado
protected: Acessível dentro do mesmo pacote ou subclasses

Tipos de retorno:
O tipo de retorno define o tipo de dado que o método devolverá (int,String,double.Objeto)
Uas-se void se o método não retorna nada
//retorna um double
    public double somarMetrgem(){
        return metragem * numeroQuartos +getNumeroBanheiros;
    }

Parametros:
não é obrigatorio ter parametros
São informação que podem passar ou não par os metodos realizarem a tarefa determinada


Metodos de instancia: precisam ser cahamdos a partr de uma instacia (objeto) da classe
Metodos estátidos: Podem sem chamados diretamente apartir da classe , sem a necessidade d criar um objeto


Classes, Interface, pacotes

Classe: È uma estrutra que define um tipo de objeto.
pode conter atributos e metodos que descrevem e manipulam o objeto.

Interface: é uma referência a um conjunto de mátodos que uma classe deve implementar.
são usadas para garantir que diferentes classes implementem os mesmos metodos, promovendo a interoperabilidade.

Pacotes: é um agrupamento de classes e interfaces relacionadas.
Ela ajuda a organizar o código e evita conflitos de nomes.
pacotes tambem ajudam a controlar o acesso as classe e interface.

Pilares fundamentais da POO
Encapsulamento, Herança, Polimorfismo, Abstração

Encapsulamento: restringe o acesso dos componentes da classe,
geralmente torna os componentes privado, e fornece outros métodos publicos para acessa-los, ajuda a protegeros dados internos
do objeto e promeove a integridade e segurança

proteção de dados: impede que os dados sejam alterados diretamente de fora da classe.

Ocultação de informação: /esconde os detalhes internos da implementação da classe, expondo apenas o necessário para o uso da classe

Facilidade de mantenção: permite modificar a implementação interna sem afetar o codigo externo que usa a classe

Modularidade: ajud a dividir o programa em parte menores e mais gerenciaveis.

HERANÇA:
Permite que a classe herde atributos e metodos de outra classe, promovendo a reutilização do código.
Redez a duplicação de código e melhora a organização- Representado pela palavra extends

Diferança entre herança e interface:
Na interface a classe é obrigatório a implementação dos metodos
Na herança é possivel escolher os metodos

Uma classe pode implementar multiplas interfaces, enquanto que na herança só pode herdar uma classe


POLIMORFISMO:

Permite queum unico nome de método possa se referir a diferentes comportamentos dependenddo do objeto que o chama
Existem dois tipos principais de polimorfismo em java:

De compilação(Sobrecarga de métodos)


De tempo de execução (Sobrescrita de métodos)

Compilação: fase que o código fonte é transformado em código de máquina(bytecode) pelo compilador.

Tempo de execução: Fase após o codigo ser compilado, qu é executado pela maquina virtual(JVM) ou pelo sistema operacional

Polimorfirmo de compilação:
A sobrecarga de métodos ocorre quando vc define métodos com o mesmo nome , mas com diferentes
assinaturas(difrente numero ou tipo de parametro) na mesma classe. O compilador descide qual metodo
chamar com base na lista de argumentos fornecidos na chamada do metodo.
Nomes iguais, porem com parametros diferentes.


Polimorfismo De tempo de execução (Sobrescrita de métodos):
Ocorre quando uma classe filha fornece uma implementação especifica de um metodo que já esta definido
na sua classe pai.
Neste caso, a decisão sobre qual metodo usar é feita durante a execução do programa(runtime).


COMPOSIÇÃO E AGREGAÇÃO:
São formas de associação onde um objeto contém o outro.

Composição: é uma relaçãoforte entre duas classes, onde um classe contém uma instancia
de outra classe como um dos seus atributos. EX: não existe carro sem motor, onde se um deixa de existir o outro tbm
deixa, representa uma relação parte-todo, onde o ciclo de vida e dependente.

Agregação: é uma realação mais fraca, onde um é referencia do outro, porem o ciclo de vida de um não está
totalmente ligado ao outro. Ex: departamento e fncionários, eles não dependem um do outra para existir.


ABSTRACAO:
É difernte de classe abstrata.
Envolve a criacao de calsses que representam entidades do mundo real com suas prioridades e comportamento mais relevantes
ignorando os detalhes que não são importantes para o contexto especifico.

Classe("pai")
ex: classe pessoa: tem nome, idade e telefone
classe funcionario e classe cliente, poderia utilizar a classe pessoa pois os dois tem os mesmos atributos em comum


Diferença entre interface e classe abstrata:
Interface é um contrato, a classe que implementa uma interface, obrigatorioamente ela precisa utilizar todos os metodos da interface
Classe abstrata não formam um contrato, pode se utilizar o que for interessante.
